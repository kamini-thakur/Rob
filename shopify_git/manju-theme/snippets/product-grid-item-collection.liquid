{% comment %}
Set the default grid_item_width if no variable is set
{% endcomment %}
{% comment %}
Check if the product is on sale and set a variable to be used below.
{% endcomment %}
{% assign on_sale = false %}
{% if product.compare_at_price > product.price %}
{% assign on_sale = true %}
{% endif %}

{% comment %}
Check if the product is sold out and set a variable to be used below.
{% endcomment %}
{% assign sold_out = true %}
{% if product.available %}
{% assign sold_out = false %}
{% endif %}
<div id="collections-block">
  <div class="product col-sm-4 col-lg-3 coll-info-height">

    {% comment %}
    Link to your product with the 'within: collection' filter for the link to be aware of the collection.
    This allows you to create collection-based navigation on the product page.

    Results of using 'within: collection':
    - Instead of a URL with /products/product-handle
    you would get /collections/collection-handle/products/product-handle

    For more info on navigation within a collection
    - http://docs.shopify.com/support/your-store/collections/how-to-navigate-within-a-collection

    {% endcomment %}
    <div class="product-img">
      <a href="{{ product.url | within: collection }}">
        <img src="{{ product.featured_image.src | img_url: 'large' }}" alt="{{ product.featured_image.alt | escape }}">
      </a>
      <div class="actions">
        <a class="action" href="{{ product.featured_image.src | img_url: '1024x1024' }}" data-lightbox="image"><span class="icon-maximize-plus"></span></a>
        {% include 'wishlist-product' %}
        <form action="/cart/add" method="post" id="product-form-{{ product.id }}">   
          <input type="hidden" name="id" value="{{ product.variants.first.id }}">
          <div>
            <!--     <a class="action" type="submit" href="{{ product.url | within: collection }}"><span class="icon-shoppingcart"></span></a> -->
            <button type="submit" class="action" name="add"><span class="icon-shoppingcart"></span></button>
          </div>  
        </form>
        <!--     <a class="action" href="{{ product.url | within: collection }}"><span class="icon-shoppingcart"></span></a> -->
      </div>
    </div>
    <span class="name">
      <a href="{{ product.url | within: collection }}">{{ product.title }}</a>
    </span>
    <span class="price">
      {% comment %}
      You can show a leading 'from' or 'up to' by checking 'product.price_varies'
      if your variants have different prices.
      {% endcomment %}
      {% if on_sale %}
      {% if product.price_varies %}
      {% assign sale_price = product.price | money %}
      {{ 'products.product.on_sale_from_html' | t: price: sale_price }}
      {% else %}
      <strong>{{ 'products.product.on_sale' | t }}</strong> &nbsp;
      {{ product.price | money }}
      {% endif %}
      {% else %}
      {% if product.price_varies %}
      {% assign price = product.price | money %}
      {{ 'products.general.from_text_html' | t: price: price }}
      {% else %}
      {{ product.price | money }}
      {% endif %}
      {% endif %}
      {% if sold_out %}
      &nbsp;<br><strong>{{ 'products.product.sold_out' | t }}</strong>
      {% endif %}
      {% if on_sale %}
      <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
      <del><s>{{ product.compare_at_price | money }}</s></del>
      {% endif %}
    </span>
  </div>
</div>

<script>
  $( document ).ready(function() {
    (function($){
      function fixButtonHeights() {
        var heights = new Array();

        // Loop to get all element heights
        $('.coll-info-height').each(function() { 
          // Need to let sizes be whatever they want so no overflow on resize
          $(this).css('min-height', '0');
          $(this).css('max-height', 'none');
          $(this).css('height', 'auto');

          // Then add size (no units) to array
          heights.push($(this).height());
        });

        // Find max height of all elements
        var max = Math.max.apply( Math, heights );

        // Set all heights to max height
        $('.coll-info-height').each(function() {
          $(this).css('height', max + 'px');
          // Note: IF box-sizing is border-box, would need to manually add border

        }); 
      }

      $(window).load(function() {
        // Fix heights on page load
        fixButtonHeights();

        // Fix heights on window resize
        $(window).resize(function() {
          // Needs to be a timeout function so it doesn't fire every ms of resize
          setTimeout(function() {
            fixButtonHeights();
          }, 100);
        });
      });
    })(jQuery);
  });
</script>